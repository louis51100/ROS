import rospy
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
import math
import time
from std_srvs.srv import Empty

def move( speed, distance, isForward):
     velocity_message = Twist()

     x0=x
     y0=y

     velocity_message.linear.x=speed
     distance_moved = 0.0
     loop_rate = rospy.Rate(10)     

     velocity_publisher = rospy.Publisher("/cmd_vel",Twist,queue_size=10)

     while True :
        rospy.loginfo("Turtlesim moves forwards")

        velocity_publisher.publish(velocity_message)

        loop_rate.sleep()
                 
        distance_moved = distance_moved+abs(0.5 * math.sqrt(((x-x0) ** 2) + ((y-y0) ** 2)))
        print  distance_moved               
        if  not (distance_moved<distance):
            rospy.loginfo("reached")
            break
            
            
     velocity_message.linear.x=0
     velocity_publisher.publish(velocity_message)

def rotate( angular_speed, angle, clockWise):
    velocity_message = Twist()
    loop_rate = rospy.Rate(10)     


    velocity_publisher = rospy.Publisher("/cmd_vel",Twist,queue_size=10)

    velocity_message.angular.z=angular_speed

    if(clockWise):
        velocity_message.angular.z=-abs(angular_speed)
    else:
        velocity_message.angular.z=abs(angular_speed)

    while True:
        velocity_publisher.publish(velocity_message)
        loop_rate.sleep()

        if not(current_angle<angle):
            rospy.loginfo("reached")
            break





if __name__ == '__main__':
    try:


    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated.")
